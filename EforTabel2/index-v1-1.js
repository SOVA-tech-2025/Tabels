// –î–æ–±–∞–≤–∏–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { google } = require('googleapis');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;
const TABEL_SHEET_ID = '1ed5l9Z1kJyQlGR5JdOhbicrYZREu77KJTAacRqzvkJ8'; // –¢–∞–±–µ–ª—å
const ACCESS_SHEET_ID = '1jMuUhA5jmlPDJyRXcgfmOHYU4lIcuIDl0Xd_VPBOsJs'; // –î–æ—Å—Ç—É–ø—ã
const ACCESS_SHEET_NAME = '–ü–†–ê–í–ê –î–û–°–¢–£–ü–ê';

const bot = new TelegramBot(BOT_TOKEN, { polling: true });
const sheets = google.sheets({ version: 'v4', auth: GOOGLE_API_KEY });

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
async function checkUserAccess(userId) {
  try {
    const res = await sheets.spreadsheets.values.get({
      spreadsheetId: ACCESS_SHEET_ID,
      range: `${ACCESS_SHEET_NAME}!A:ZZ`,
    });

    const rows = res.data.values;
    if (!rows || rows.length <= 1) return false;

    for (let i = 1; i < rows.length; i++) {
      const row = rows[i];
      const rowUserId = row[0]?.toString().trim();

      if (rowUserId === userId.toString()) {
        const bakeries = row.slice(3)
          .filter(x => x && x.trim().length > 0);
        return bakeries;
      }
    }

    return false;
  } catch (err) {
    console.error('[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞:', err.message);
    return false;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
async function getBakeryReport(sheetName, day) {
  try {
    const range = `${sheetName}!A3:AG13`;
    const res = await sheets.spreadsheets.values.get({
      spreadsheetId: TABEL_SHEET_ID,
      range,
    });

    const rows = res.data.values;
    if (!rows || rows.length === 0) return null;

    const columnIndex = 1 + parseInt(day); // 1‚Äì31 ‚Üí 2‚Äì32

    const now = new Date();
    const monthNames = [
      '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
      '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
    ];
    const currentMonth = monthNames[now.getMonth()];

    let report = `*${sheetName.toUpperCase()}*\n${day} ${currentMonth}:\n\n`;

    for (let i = 0; i < rows.length; i += 2) {
      const planRow = rows[i];
      const factRow = rows[i + 1];

      if (!planRow || !factRow ||
          planRow[0]?.trim() !== '–ø–ª–∞–Ω' ||
          factRow[0]?.trim() !== '—Ñ–∞–∫—Ç') continue;

      const position = planRow[1]?.trim() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å';
      const planValue = parseFloat(planRow[columnIndex]) || 0;
      const factValue = parseFloat(factRow[columnIndex]) || 0;
      const diff = factValue - planValue;

      let emoji = '';
      if (diff >= 1) emoji = 'üî¥';
      else if (diff < -5) emoji = 'üü†';
      else if (diff >= 0 && diff <= 1) emoji = 'üü¢';

      report += `*${position}*\n` +
                `–ø–ª ${planValue.toFixed(1)} | —Ñ–∞–∫—Ç ${factValue.toFixed(1)} | –æ—Ç–∫–ª: ${diff.toFixed(1)} ${emoji}\n`;
    }

    return report;
  } catch (err) {
    console.error(`[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ ${sheetName}:`, err.message);
    return null;
  }
}


// /start
bot.onText(/\/start/, (msg) => {
  const userId = msg.from.id;
  const name = `${msg.from.first_name || ''} ${msg.from.last_name || ''}`.trim();
  console.log(`[LOG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${name} (ID: ${userId}) –æ—Ç–ø—Ä–∞–≤–∏–ª /start`);
  
  bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /report');
});

// /report
bot.onText(/\/report/, async (msg) => {
  const userId = msg.from.id;
  const name = `${msg.from.first_name || ''} ${msg.from.last_name || ''}`.trim();
  console.log(`[LOG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${name} (ID: ${userId}) –æ—Ç–ø—Ä–∞–≤–∏–ª /report`);

  const bakeries = await checkUserAccess(userId);
  if (!bakeries) {
    console.log(`[LOG] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–æ—Å—Ç—É–ø–∞`);
    return bot.sendMessage(msg.chat.id, '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');
  }

  if (bakeries.length === 0) {
    console.log(`[LOG] ‚õî –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫`);
    return bot.sendMessage(msg.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∏ –æ–¥–Ω–æ–π —Ç–æ—á–∫–µ');
  }

  console.log(`[LOG] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ—á–∫–∏: ${bakeries.join(', ')}`);
  bot.sendMessage(msg.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ (1-31):');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
bot.on('message', async (msg) => {
  if (!/^\d{1,2}$/.test(msg.text)) return;

  const day = parseInt(msg.text);
  const userId = msg.from.id;
  const name = `${msg.from.first_name || ''} ${msg.from.last_name || ''}`.trim();

  if (day < 1 || day > 31) {
    console.log(`[LOG] ‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É: ${msg.text}`);
    return bot.sendMessage(msg.chat.id, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31');
  }

  console.log(`[LOG] üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${name} (ID: ${userId}) –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç—á–µ—Ç –∑–∞ ${day} —á–∏—Å–ª–æ`);

  const bakeries = await checkUserAccess(userId);
  if (!bakeries || bakeries.length === 0) {
    console.log(`[LOG] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–æ—á–∫–∞–º`);
    return bot.sendMessage(msg.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º');
  }

  let found = false;
  for (const bakery of bakeries) {
    console.log(`[LOG] üîç –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –¥–ª—è ${bakery}, –¥–µ–Ω—å ${day}`);
    const report = await getBakeryReport(bakery, day);

    if (report) {
      console.log(`[LOG] ‚úÖ –û—Ç—á–µ—Ç –Ω–∞–π–¥–µ–Ω –¥–ª—è ${bakery}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
      await bot.sendMessage(msg.chat.id, report, { parse_mode: 'Markdown' });
      found = true;
      await new Promise(res => setTimeout(res, 300));
    } else {
      console.log(`[LOG] ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${bakery} –∑–∞ ${day}`);
    }
  }

  if (!found) {
    console.log(`[LOG] ‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ`);
    bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É');
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–∞–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async function testTablesAccess() {
  try {
    await sheets.spreadsheets.values.get({
      spreadsheetId: ACCESS_SHEET_ID,
      range: `${ACCESS_SHEET_NAME}!A1`,
    });

    console.log('[INIT] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–æ–π–¥–µ–Ω–∞');
  } catch (err) {
    console.error('[ERROR] –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–∞–º:', err.message);
    process.exit(1);
  }
}

testTablesAccess().then(() => {
  console.log('[INIT] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
  if (process.env.ADMIN_CHAT_ID) {
    bot.sendMessage(process.env.ADMIN_CHAT_ID, '‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
  }
});
