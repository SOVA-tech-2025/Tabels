// –≤–µ—Ä—Å–∏—è v2 —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ —É—Å–ª–æ–≤–∏—è–º —à–∞–±–ª–æ–Ω–∞

require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { google } = require('googleapis');

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;
const TABEL_SHEET_ID = '1ed5l9Z1kJyQlGR5JdOhbicrYZREu77KJTAacRqzvkJ8';
const ACCESS_SHEET_ID = '1edfD6XdgPqxxLTBRRXrBWcbmPZeRQB7CDaLvk3vPrww';
const ACCESS_SHEET_NAME = '–ü–†–ê–í–ê –î–û–°–¢–£–ü–ê';

const bot = new TelegramBot(BOT_TOKEN, { polling: true });
const sheets = google.sheets({ version: 'v4', auth: GOOGLE_API_KEY });

const userState = {};

async function checkUserAccess(userId) {
  try {
    const res = await sheets.spreadsheets.values.get({
      spreadsheetId: ACCESS_SHEET_ID,
      range: `${ACCESS_SHEET_NAME}!A:ZZ`,
    });

    const rows = res.data.values;
    if (!rows || rows.length <= 1) return false;

    for (let i = 1; i < rows.length; i++) {
      const row = rows[i];
      const rowUserId = row[0]?.toString().trim();

      if (rowUserId === userId.toString()) {
        const bakeries = row.slice(3).filter(x => x && x.trim().length > 0);
        return bakeries;
      }
    }
    return false;
  } catch (err) {
    console.error('[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞:', err.message);
    return false;
  }
}

async function getBakeryReport(sheetName, day) {
  try {
    const range = `${sheetName}!A3:AG13`;
    const res = await sheets.spreadsheets.values.get({
      spreadsheetId: TABEL_SHEET_ID,
      range,
    });

    const rows = res.data.values;
    if (!rows || rows.length === 0) return null;

    const columnIndex = 1 + parseInt(day);

    const now = new Date();
    const monthNames = [
      '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
      '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
    ];
    const currentMonth = monthNames[now.getMonth()];

    let report = `*${sheetName.toUpperCase()}*\n${day} ${currentMonth} (–ø–ª–∞–Ω/—Ñ–∞–∫—Ç/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)\n`;

    for (let i = 0; i < rows.length; i += 2) {
      const planRow = rows[i];
      const factRow = rows[i + 1];

      if (!planRow || !factRow || planRow[0]?.trim() !== '–ø–ª–∞–Ω' || factRow[0]?.trim() !== '—Ñ–∞–∫—Ç') continue;

      const position = planRow[1]?.trim() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å';
      const plan = parseFloat(planRow[columnIndex]) || 0;
      const fact = parseFloat(factRow[columnIndex]) || 0;

      let line = '';
      if (fact === 0) {
        line = `${position}: ${plan}/${fact}/‚ÄºÔ∏è–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö‚ÄºÔ∏è`;
      } else {
        const deviation = +(fact - plan).toFixed(2);
        let emoji = 'üü¢';
        if (deviation > 1) emoji = 'üî∫';
        else if (deviation < -5) emoji = 'üîª';
        line = `${position}: ${plan}/${fact}/${Math.abs(deviation)}${emoji}`;
      }

      report += `${line}\n`;
    }

    return report;
  } catch (err) {
    console.error(`[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ ${sheetName}:`, err.message);
    return null;
  }
}

bot.onText(/\/start/, (msg) => {
  const userId = msg.from.id;
  const name = `${msg.from.first_name || ''} ${msg.from.last_name || ''}`.trim();
  console.log(`[LOG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${name} (ID: ${userId}) –æ—Ç–ø—Ä–∞–≤–∏–ª /start`);

  bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /report');
});

bot.onText(/\/report/, async (msg) => {
  const userId = msg.from.id;
  const bakeries = await checkUserAccess(userId);

  if (!bakeries) {
    return bot.sendMessage(msg.chat.id, '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');
  }

  const keyboard = bakeries.map(b => ([{ text: b }]));
  keyboard.push([{ text: 'üìä –í—Å–µ –æ–±—ä–µ–∫—Ç—ã' }]);

  userState[userId] = { step: 'selectBakery', bakeries };

  bot.sendMessage(msg.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:', {
    reply_markup: {
      keyboard: [...keyboard, [{ text: 'üîô –ù–∞–∑–∞–¥' }]],
      one_time_keyboard: true,
      resize_keyboard: true,
    }
  });
});

bot.on('message', async (msg) => {
  const userId = msg.from.id;
  const state = userState[userId];

  if (!state) return;

  if (msg.text === 'üîô –ù–∞–∑–∞–¥') {
    delete userState[userId];
    return bot.sendMessage(msg.chat.id, '–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω—ë–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /report –¥–ª—è –Ω–∞—á–∞–ª–∞.');
  }

  if (state.step === 'selectBakery') {
    const selected = msg.text;

    if (!state.bakeries.includes(selected) && selected !== 'üìä –í—Å–µ –æ–±—ä–µ–∫—Ç—ã') {
      return bot.sendMessage(msg.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.');
    }

    userState[userId].selectedBakery = selected;
    userState[userId].step = 'selectDay';

    const days = Array.from({ length: 31 }, (_, i) => ({ text: `${i + 1}` }));
    const keyboard = [];
    while (days.length) keyboard.push(days.splice(0, 7));
    keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥' }]);

    return bot.sendMessage(msg.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞:', {
      reply_markup: {
        keyboard,
        one_time_keyboard: true,
        resize_keyboard: true,
      }
    });
  }

  if (state.step === 'selectDay') {
    const day = parseInt(msg.text);
    if (isNaN(day) || day < 1 || day > 31) {
      return bot.sendMessage(msg.chat.id, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31');
    }

    const bakeries = state.selectedBakery === 'üìä –í—Å–µ –æ–±—ä–µ–∫—Ç—ã' ? state.bakeries : [state.selectedBakery];

    let found = false;
    for (const bakery of bakeries) {
      const report = await getBakeryReport(bakery, day);
      if (report) {
        await bot.sendMessage(msg.chat.id, report, { parse_mode: 'Markdown' });
        found = true;
        await new Promise(res => setTimeout(res, 300));
      }
    }

    if (!found) {
      await bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É');
    }

    delete userState[userId];
  }
});

async function testTablesAccess() {
  try {
    await sheets.spreadsheets.values.get({
      spreadsheetId: ACCESS_SHEET_ID,
      range: `${ACCESS_SHEET_NAME}!A1`,
    });

    console.log('[INIT] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–æ–π–¥–µ–Ω–∞');
  } catch (err) {
    console.error('[ERROR] –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–∞–º:', err.message);
    process.exit(1);
  }
}

testTablesAccess().then(() => {
  console.log('[INIT] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
  if (process.env.ADMIN_CHAT_ID) {
    bot.sendMessage(process.env.ADMIN_CHAT_ID, '‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
  }
});
